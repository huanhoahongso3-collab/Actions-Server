name: CI
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: '0 */5 * * *' # Run every 5 hours
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags
          token: ${{ secrets.FINE_GRAINED_PAT }} # Use fine-grained PAT for checkout
      - name: Set up OpenJDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'
      - name: Debug - List directory contents
        run: ls -la
      - name: Run Spigot with 30-second commits and workflow deletion
        # This condition ensures the step doesn't run if the commit message already contains "Auto commit every 30 seconds"
        # to prevent an infinite loop of workflow triggers from self-commits.
        if: "!contains(github.event.head_commit.message, 'Auto commit every 30 seconds')"
        env:
          FINE_GRAINED_PAT: ${{ secrets.FINE_GRAINED_PAT }}
          REPO: ${{ github.repository }}
        run: |
          # Define the full download link for the PaperMC JAR
          LINK="https://api.papermc.io/v2/projects/paper/versions/1.20.1/builds/196/downloads/paper-1.20.1-196.jar"
          JAR="${LINK##*/}"
          echo "Downloading $JAR from $LINK..."
          wget "$LINK" -O "$JAR"
          chmod +x playit-linux-amd64
          echo "$PLAYIT_SECRET" > playit.toml
          echo "Starting Minecraft server ($JAR)..."
          # The `&` at the end runs the server in the background.
          # The `SPIGOT_PID=$!` captures the PID of the background process.
          java -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -Dusing.aikars.flags=https://mcflags.emc.gs -Daikars.new.flags=true -Xms16G -Xmx16G -jar "$JAR" nogui 2>&1 | sed '/login:/s/.*/<REDACTED>/' &
          SPIGOT_PID=$!
          echo "Minecraft server started with PID $SPIGOT_PID"

          # Function to commit and push changes
          commit_and_push() {
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add -A # Stage all changes
            # `|| echo "No changes to commit"` prevents the workflow from failing if there are no changes.
            git commit -m "Auto commit every 30 seconds" || echo "No changes to commit"
            # Use GITHUB_REPOSITORY for the repository name, which is a standard GitHub Actions environment variable.
            git push https://x-access-token:${FINE_GRAINED_PAT}@github.com/${GITHUB_REPOSITORY}.git HEAD:main
          }

          # Function to delete auto-commit workflow runs
          delete_auto_commit_workflows() {
            # Ensure `jq` is installed for JSON parsing. GitHub Actions runners usually have it.
            workflow_ids=$(curl -s -H "Authorization: token $FINE_GRAINED_PAT" \
              "https://api.github.com/repos/${REPO}/actions/runs" | \
              jq '.workflow_runs[] | select(.head_commit.message | contains("Auto commit every 30 seconds")) | .id')

            for id in $workflow_ids; do
              echo "Deleting workflow run $id"
              curl -s -X DELETE -H "Authorization: token $FINE_GRAINED_PAT" \
                "https://api.github.com/repos/${REPO}/actions/runs/$id"
            done
          }

          # Loop to commit and delete workflows every 156 seconds
          while true; do
            sleep 156
            commit_and_push
            delete_auto_commit_workflows
            # Check if processes are still running
            # `kill -0 $SPIGOT_PID` sends signal 0, which checks if the process exists without killing it.
            if ! kill -0 $SPIGOT_PID 2>/dev/null; then
              echo "Spigot process has finished. Terminating the workflow."
              break
            fi
          done
